#!/usr/bin/env node

const fetch = require("node-fetch");
const yargs = require("yargs");

const argv = yargs
  .example("./scrape_crowdfunder [options] http://example.com/projects")
  .option("verbose", {
    alias: "v",
    description: "Run verbosely",
    type: "boolean"
  })
  .hide("version")
  .help()
  .alias("help", "h").argv;

const cheerio = require("cheerio");
const verbose = argv.verbose;
const index_url = argv._[0];

function abort(message) {
  process.stderr.write(message + "\n");
  process.exit(1);
}

async function fetchAndParse(url, verbose, resolve) {
  if (verbose) {
    process.stdout.write(`Fetching: GET ${url} ... `);
  }
  let response;
  let status;
  let error_message;
  await fetch(url)
    .then(res => {
      response = res;
    })
    .catch(err => {
      if (verbose) {
        error_message = err.message;
      }
    });
  let html;
  if (response) {
    status = response.status;
    if (status != 200) {
      if (verbose) {
        console.log(`HTTP error status for ${url} - ${status}`);
      }
      return { status: status, $: undefined };
    } else {
      html = await response.text();
      if (verbose) {
        console.log(`status ${status}, ${html.length} bytes`);
      }
      let $ = cheerio.load(html);
      result = { status: status, $: $ }
      if (resolve) {
        return resolve(result);
      } else {
        return result;
      }
    }
  } else {
    if (verbose) {
      console.log(`HTTP error status for ${url} - ${error_message}`);
    }
    return { status: "???", $: undefined };
  }
}

function getDetailPages(urls, results, verbose) {
  console.log(urls);
  return urls.map(url => getDetailPage(url, results));
}

function parseCampaignGoal($) {
  let x = $('h5.campaign-goal').text().replace(/(&euro;|€)|,/g, '');
  //console.log(x);
  return Number(x);
}

function parseRemainingAmount($) {
  return 0;
  let x = $('p.remaining-amount').innerHTML()//.replace(/(&euro;|€)|,/g, '');
  console.log(x);
  return Number(x);
}

function getDetailPage(url, verbose) {
  return fetchAndParse(url, verbose, ({status, $}) => {
    console.log(status);
    const campaignGoal = parseCampaignGoal($);
    const remainingAmount = parseRemainingAmount($);
    const result = {
      url: url,
      campaignGoal: campaignGoal,
      remainingAmount: remainingAmount
    };
    //console.table(result);
    return result;
  });
}

function printResults(results) {
  const count = results.length;
  const total = results.reduce((t, current) => {
    return t + current.campaignGoal;
  }, 0);
  const remaining = results.reduce((t, current) => {
    return t + current.remainingAmount;
  }, 0);
  console.log(
    `${count} campaigns, ${total}€ total, ${remaining}€ remaining, ${total -
      remaining}€ earned`
  );
}

function getIndex(url, verbose) {
  fetchAndParse(url, verbose, ({ status, $ }) => {
    if (status === 200) {
      const detailPageLinks = parseDetailPageLinks($);
      if (detailPageLinks.length === 0) {
        abort("No projects found, has the site changed? Check the URL given?");
      } else {
        let queries = getDetailPages(detailPageLinks, verbose);
        //console.log("before promise.all");
        //console.log(queries);
        Promise.all(queries).then((values) => {
          //console.log("resolved promise.all");
          console.table(values);
          printResults(values);
        });
      }
    } else {
      abort(
        `Projects page returned HTTP ${status} - Is the site down? Check the URL given?`
      );
    }
  });
}

if (index_url) {
  getIndex(index_url, verbose);
} else {
  abort(
    "Please provide the url of the list of campaigns, i.e. './scrape_crowdfunder http://example.com/projects'"
  );
}

function parseDetailPageLinks($) {
  return $(".campaign-details a.campaign-link")
    .get()
    .map(link => {
      return $(link).attr("href");
    });
}
