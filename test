#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems'
require 'bundler/setup'
require 'pp'
require 'pry'
require 'capybara'
Capybara.server = :webrick
require "minitest/autorun"
require 'open3'

SCRAPER_PATH = ARGV.first
unless SCRAPER_PATH and File.exist?(SCRAPER_PATH)
  raise ArgumentError, "Please provide the scraper you want to test, i.e. './test ruby/scrape_crowdfunder'"
end

class TestScraper < Minitest::Test

  def setup
    @response_status = 200
    @response_body   = 'Hello, Sailor!'
    app              = proc { |_env| [@response_status, {}, [@response_body]] }
    server           = Capybara::Server.new(app).boot
    @testserver_url  = "http://#{server.host}:#{server.port}"
  end
  
  def run_scraper(script_options = "")
    path, script = SCRAPER_PATH.split("/")
    command = ""
    # We need to cd into any sub-folder(s) so the scripts there can do setup like rvm, bundler, nvm, etc.
    command += "cd #{path} && "      if path
    command += "./#{script}"
    command += " #{script_options}"  if script_options
    command += " #{@testserver_url}"
    # We need to have a "clean" Bundler env (i.e., forget any currently loaded gems),
    # as the script called might be another Ruby script, with its own Gemfile, and by default
    # shelling out "keeps" the gems from this test runner, making the script fail
    stdout, stderr, status = *Bundler.with_original_env do
      Open3.capture3(command)
    end
    {
      stdout: stdout.strip,
      stderr: stderr.strip,
      status: status.exitstatus,
    }
  end

  def assert_error(expected_message)
    result = run_scraper
    assert_equal(expected_message, result[:stderr])
    assert_equal(1, result[:status])
    result
  end

  def assert_success(expected_output, script_options = nil)
    result = run_scraper(script_options)
    assert_equal(expected_output, result[:stdout])
    assert_equal(0, result[:status])
    result
  end

  def test_index_page_has_no_projects
    assert_error "No projects found, has the site changed? Check the URL given?"
  end

  def test_index_page_returns_404
    @response_status = 404
    assert_error "Projects page returned HTTP 404 - Is the site down? Check the URL given?"
  end

  def test_page_1_returns_404
    skip "TODO"
  end

  def test_detail_page_1_returns_404
    skip "TODO"
  end

  def test_simple_success_case
    # TODO: Set up links and data so that there is one project on the first index page, no pagination links
    assert_success "1 campaigns, 100€ total, 80€ remaining, 20€ earned"
  end

  def test_success_with_pagination
    # TODO: Set it up so index page has 8 projects, and 1 extra page with 1 more project on it
    assert_success "9 campaigns, 900€ total, 720€ remaining, 180€ earned"
  end

  def test_verbose_mode_is_enabled_with_short_flag
    # Use the simple case, but check for the full output
    skip "TODO"
  end

  def test_verbose_mode_is_enabled_with_long_flag
    # Use the simple case, but check for the full output
    skip "TODO"
  end

  def help_text
    help = <<HELP
Usage: ./scrape_crowdfunder [options] http://example.com/projects
    -v, --[no-]verbose               Run verbosely
HELP
    help.strip
  end

  def test_help_message_shown_for_short_flag
    assert_success(help_text, "-h")
  end

  def test_help_message_shown_for_long_flag
    assert_success(help_text, "--help")
  end
  
  def test_error_shown_on_missing_url
    skip "TODO"
  end

end
