#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems'
require 'bundler/setup'
require 'pp'
require 'pry'
require 'capybara'
Capybara.server = :webrick
require "minitest/autorun"
require 'open3'
require 'active_support'
require 'active_support/core_ext/object/blank'

SCRAPER_PATH = ARGV.first
unless SCRAPER_PATH and File.exist?(SCRAPER_PATH)
  raise ArgumentError, "Please provide the scraper you want to test, i.e. './test ruby/scrape_crowdfunder'"
end

class TestScraper < Minitest::Test

  def setup
    @response_status = 200
    @response_body   = 'Hello, Sailor!'
  end
  
  def start_test_server
    @app             ||= proc { |env| [@response_status, {}, [@response_body]] }
    @app_with_error_handler = proc do |env|
      @app.call(env)
    rescue # the TestServer class swallows exceptions, it seems, so let's log them at least
      puts "\nError in test app handler!"
      puts $!.message
      puts $!.backtrace.join("\n")
    end
    @test_server     = Capybara::Server.new(@app_with_error_handler).boot
    @testserver_url  = "http://#{@test_server.host}:#{@test_server.port}"
  end
  
  def run_scraper(script_options: nil, index_url: @testserver_url)
    path, script = SCRAPER_PATH.split("/")
    command = ""
    # We need to cd into any sub-folder(s) so the scripts there can do setup like rvm, bundler, nvm, etc.
    command += "cd #{path} && "      if path
    command += "./#{script}"
    command += " #{script_options}"  if script_options
    command += " #{index_url}"
    # We need to have a "clean" Bundler env (i.e., forget any currently loaded gems),
    # as the script called might be another Ruby script, with its own Gemfile, and by default
    # shelling out "keeps" the gems from this test runner, making the script fail
    stdout, stderr, status = *Bundler.with_original_env do
      Open3.capture3(command)
    end
    {
      stdout: stdout.strip.presence,
      stderr: stderr.strip.presence,
      status: status.exitstatus,
    }
  end

  def assert_error(expected_message, options = {})
    start_test_server unless @test_server
    result = run_scraper(options)
    puts result[:stdout] if result[:stdout] and expected_message != result[:stderr]
    assert_equal(expected_message, result[:stderr])
    assert_equal(1, result[:status])
    result
  end

  def assert_success(expected_output, options = {})
    start_test_server unless @test_server
    result = run_scraper(options)
    puts result[:stderr] if result[:stderr] and expected_output != result[:stdout]
    assert_equal(expected_output, result[:stdout])
    assert_equal(0, result[:status])
    result
  end

  def test_index_page_has_no_projects
    assert_error "No projects found, has the site changed? Check the URL given?"
  end

  def test_index_page_returns_404
    @response_status = 404
    assert_error "Projects page returned HTTP 404 - Is the site down? Check the URL given?"
  end

  def test_simple_success_case
    # Set it up so there's only one page (the index page), i.e. no pagination, and only one project
    index_html = lambda do
      <<-HTML
      <html><body>
      <h1>Le index page</h1>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/1'>project 1</a></div>
      </body></html>
      HTML
    end
    project_1_html = lambda do
      <<-HTML
      <html><body>
      <h1>Le project 1 page</h1>
      <h5 class='campaign-goal'> € 1,000 </h5>
      <p class='remaining-amount'> Bla bla <span> €80,0 </span> </p>
      </body></html>
      HTML
    end
    @app = proc do |env|
      html = case env["REQUEST_PATH"]
      when "/project/1" then project_1_html.call
      else index_html.call
      end
      [@response_status, {}, [html]]
    end
    assert_success "1 campaigns, 1000€ total, 800€ remaining, 200€ earned"
  end

  def test_page_1_returns_404
    skip "TODO"
  end

  def test_detail_page_1_returns_404_is_ignored
    # when a detail page is not working, we ignore it and don't count the project
    # so set it up so that we have 3 links, but the second one returns 404
    # also take the opportunity to check that parsing different amounts of currency works
    index_html = lambda do
      <<-HTML
      <html><body>
      <h1>Le index page</h1>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/1'>project 1</a></div>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/2'>project 2</a></div>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/3'>project 3</a></div>
      </body></html>
      HTML
    end
    project_1_html = lambda do
      <<-HTML
      <html><body>
      <h1>Le project 1 page</h1>
      <h5 class='campaign-goal'> €30 </h5>
      <p class='remaining-amount'> Bla bla <span> €29 </span> </p>
      </body></html>
      HTML
    end
    project_3_html = lambda do
      <<-HTML
      <html><body>
      <h1>Le project 3 page</h1>
      <h5 class='campaign-goal'> € 999999 </h5>
      <p class='remaining-amount'> Bla bla <span> €0 </span> </p>
      </body></html>
      HTML
    end
    @app = proc do |env|
      status, html = *case env["REQUEST_PATH"]
      when "/project/1" then [200, project_1_html.call]
      when "/project/2" then [404, ""]
      when "/project/3" then [200, project_3_html.call]
      else [200, index_html.call]
      end
      [status, {}, [html]]
    end
    assert_success "2 campaigns, 1000029€ total, 29€ remaining, 1000000€ earned"#, script_options: "-v"
  end

  def test_success_with_pagination
    # Set it up so index page has 8 projects, and 1 extra page with 1 more project on it
    # Index page has 8 links to detail pages, and 1 link to an extra page
    index_html = lambda do
      <<-HTML
      <html><body>
      <h1>Le index page</h1>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/1'>project 1</a></div>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/2'>project 2</a></div>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/3'>project 3</a></div>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/4'>project 4</a></div>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/5'>project 5</a></div>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/6'>project 6</a></div>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/7'>project 7</a></div>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/8'>project 8</a></div>
      <ul class='pagination'>
        <li><a class='page-link' href='#{@testserver_url}/page/1'>Next page</a></li>
      </ul>
      </body></html>
      HTML
    end
    # This is basically the same as index, only without pagination and with only one detail page link
    first_pagination_html = lambda do
      <<-HTML
      <html><body>
      <h1>Le first pagination page</h1>
      <div class='campaign-details'><a class='campaign-link' href='#{@testserver_url}/project/9'>project 9</a></div>
      </body></html>
      HTML
    end
    # detail page has only the actual two numbers we're interested in. Make the number of the project
    # dynamic via a block parameter, so we can discern each page for debugging
    project_n_html = lambda do |number|
      <<-HTML
      <html><body>
      <h1>Le project #{number} page</h1>
      <h5 class='campaign-goal'> € 1,000 </h5>
      <p class='remaining-amount'> Bla bla <span> €80,0 </span> </p>
      </body></html>
      HTML
    end
    @app = proc do |env|
      path = env["REQUEST_PATH"]
      html = case path
      when /\/project\/\d/ # use the number from the path parameter
        project_n_html.call(path.split("/").last)
      when "/page/1"
        first_pagination_html.call
      else index_html.call
      end
      [@response_status, {}, [html]]
    end
    assert_success "9 campaigns, 9000€ total, 7200€ remaining, 1800€ earned"#, script_options: "-v"
  end

  def test_verbose_mode_is_enabled_with_short_flag
    # Use the simple case, but check for the full output
    skip "TODO"
  end

  def test_verbose_mode_is_enabled_with_long_flag
    # Use the simple case, but check for the full output
    skip "TODO"
  end

  def help_text
    help = <<HELP
Usage: ./scrape_crowdfunder [options] http://example.com/projects
    -v, --[no-]verbose               Run verbosely
HELP
    help.strip
  end

  def test_help_message_shown_for_short_flag
    assert_success(help_text, script_options: "-h")
  end

  def test_help_message_shown_for_long_flag
    assert_success(help_text, script_options: "--help")
  end
  
  def test_error_shown_on_missing_url
    error = "Please provide the url of the list of campaigns, i.e. './scrape_crowdfunder http://example.com/projects'"
    assert_error(error, index_url: "")
  end
end
